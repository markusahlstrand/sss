openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: API for managing customer orders
servers:
  - url: /
    description: Local server
paths:
  /:
    get:
      summary: Service information
      responses:
        "200":
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: orders
                  version:
                    type: string
                    example: 1.0.0
  /openapi.json:
    get:
      summary: OpenAPI specification
      responses:
        "200":
          description: OpenAPI specification in JSON format
          content:
            application/json:
              schema:
                type: object
  /orders:
    post:
      summary: Create a new order
      security:
        - bearerAuth: [orders.write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderDto"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      tags:
        - orders
    get:
      summary: List orders with pagination
      security:
        - bearerAuth: [orders.read]
      parameters:
        - name: limit
          in: query
          description: Maximum number of orders to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of orders to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      tags:
        - orders
  "/orders/{id}":
    get:
      summary: Get an order by ID
      security:
        - bearerAuth: [orders.read]
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        "200":
          description: Order found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      tags:
        - orders
    patch:
      summary: Update an order
      security:
        - bearerAuth: [orders.write]
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderDto"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
      tags:
        - orders
  /healthz:
    get:
      summary: Liveness probe
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /readyz:
    get:
      summary: Readiness probe
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Order:
      type: object
      required: [id, customer_id, items, status, created_at, updated_at]
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        customer_id:
          type: string
          example: "customer-123"
        items:
          type: array
          items:
            type: string
          example: ["item-1", "item-2"]
        status:
          $ref: "#/components/schemas/OrderStatus"
        created_at:
          type: string
          format: date-time
          example: "2025-08-25T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-25T12:34:56Z"
    CreateOrderDto:
      type: object
      required: [customer_id, items]
      properties:
        customer_id:
          type: string
          example: "customer-123"
          minLength: 1
        items:
          type: array
          items:
            type: string
          example: ["item-1", "item-2"]
          minItems: 1
    UpdateOrderDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/OrderStatus"
    OrderStatus:
      type: string
      enum: [pending, paid, shipped, delivered]
      example: pending
    Problem:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          example: validation_error
        title:
          type: string
          example: Validation Error
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: "customerId should not be empty, items must contain at least 1 elements"
        instance:
          type: string
          example: "/orders"
