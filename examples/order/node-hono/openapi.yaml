openapi: 3.0.3
info:
  title: Orders Service API
  description: A Service Standard v1 compliant Orders API built with Hono and Zod OpenAPI
  version: 1.0.0
  contact:
    name: Team Orders
    email: team-orders@example.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://orders-api.example.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    ServiceInfo:
      type: object
      required: [name, version]
      properties:
        name:
          type: string
          example: orders-service
        version:
          type: string
          example: 1.0.0
          
    Health:
      type: object
      required: [status]
      properties:
        status:
          type: string
          example: ok
          
    OrderItem:
      type: object
      required: [productId, quantity, price]
      properties:
        productId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        quantity:
          type: integer
          minimum: 1
          example: 2
        price:
          type: number
          minimum: 0.01
          example: 29.99
          
    CreateOrder:
      type: object
      required: [customerId, items, totalAmount]
      properties:
        customerId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          minimum: 0.01
          example: 59.98
          
    UpdateOrder:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered]
          example: confirmed
          
    Order:
      type: object
      required: [id, customerId, items, totalAmount, status, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440002
        customerId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          example: 59.98
        status:
          type: string
          enum: [pending, confirmed, shipped, delivered]
          example: pending
        createdAt:
          type: string
          format: date-time
          example: 2023-12-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2023-12-01T12:00:00Z
          
    Problem:
      type: object
      required: [type, title, status, detail, instance]
      properties:
        type:
          type: string
          example: validation_error
        title:
          type: string
          example: Validation Error
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: customerId should not be empty, items must contain at least 1 elements
        instance:
          type: string
          example: /orders

paths:
  /:
    get:
      summary: Get service information
      description: Returns basic information about the service
      tags: [service]
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'

  /healthz:
    get:
      summary: Liveness probe
      description: Returns the health status of the service
      tags: [health]
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'

  /readyz:
    get:
      summary: Readiness probe
      description: Returns the readiness status of the service
      tags: [health]
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'

  /openapi.json:
    get:
      summary: OpenAPI specification
      description: Returns the OpenAPI specification for this service
      tags: [documentation]
      responses:
        '200':
          description: OpenAPI specification
          content:
            application/json:
              schema:
                type: object

  /orders:
    get:
      summary: Get all orders
      description: Retrieve a paginated list of orders
      tags: [orders]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of orders to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of orders to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
                
    post:
      summary: Create a new order
      description: Create a new order with the provided details
      tags: [orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /orders/{id}:
    get:
      summary: Get order by ID
      description: Retrieve a single order by its ID
      tags: [orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
                
    patch:
      summary: Update order status
      description: Update the status of an existing order
      tags: [orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
