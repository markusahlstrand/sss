openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: Orders Service - Service Standard v1 compliant
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /:
    get:
      summary: Get service information
      operationId: getServiceInfo
      tags:
        - Service Info
      responses:
        "200":
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the service
                    example: orders
                  version:
                    type: string
                    description: The version of the service
                    example: "1.0.0"
                required:
                  - name
                  - version
  /orders:
    post:
      summary: Create a new order
      operationId: createOrder
      tags:
        - Orders
      security:
        - bearerAuth: [orders.write]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: List orders with pagination
      operationId: listOrders
      tags:
        - Orders
      security:
        - bearerAuth: [orders.read]
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /orders/{id}:
    get:
      summary: Retrieve an order by ID
      operationId: getOrder
      tags:
        - Orders
      security:
        - bearerAuth: [orders.read]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update order status
      operationId: updateOrder
      tags:
        - Orders
      security:
        - bearerAuth: [orders.write]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderUpdate"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
  /healthz:
    get:
      summary: Liveness probe
      operationId: healthCheck
      tags:
        - Health
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
  /readyz:
    get:
      summary: Readiness probe
      operationId: readinessCheck
      tags:
        - Health
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
        "503":
          description: Service is not ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "not ready"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    OrderCreate:
      type: object
      required: [customerId, items]
      properties:
        customerId:
          type: string
          description: The ID of the customer placing the order
        items:
          type: array
          items:
            type: string
          description: List of item IDs in the order
          minItems: 1
    OrderUpdate:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, paid, shipped, delivered]
          description: The new status of the order
    Order:
      type: object
      required: [id, status, customerId, items, createdAt]
      properties:
        id:
          type: string
          description: Unique identifier for the order
        status:
          type: string
          enum: [pending, paid, shipped, delivered]
          description: Current status of the order
        customerId:
          type: string
          description: The ID of the customer who placed the order
        items:
          type: array
          items:
            type: string
          description: List of item IDs in the order
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the order was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the order was last updated
    Error:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
        title:
          type: string
          description: A short, human-readable summary of the problem
        status:
          type: integer
          description: The HTTP status code
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence
