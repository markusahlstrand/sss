openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: Order Management Service following Service Standard v1
servers:
  - url: http://localhost:5000
    description: Development server
paths:
  /:
    get:
      summary: Service information
      responses:
        "200":
          description: Service metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: orders
                  version:
                    type: string
                    example: 1.0.0
  /openapi.json:
    get:
      summary: OpenAPI specification
      responses:
        "200":
          description: OpenAPI JSON specification
          content:
            application/json:
              schema:
                type: object
  /healthz:
    get:
      summary: Liveness probe
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
  /readyz:
    get:
      summary: Readiness probe
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ready
  /orders:
    post:
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    get:
      summary: List orders with pagination
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Number of orders to return (1-100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of orders to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: Invalid pagination parameters
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
  /orders/{id}:
    get:
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
    patch:
      summary: Update an order's status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderUpdate"
      responses:
        "200":
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        "404":
          description: Order not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token with required scopes

  schemas:
    OrderCreate:
      type: object
      required: [customerId, items]
      properties:
        customerId:
          type: string
          description: Customer identifier
          example: "customer-123"
        items:
          type: array
          minItems: 1
          items:
            type: string
          description: List of order items
          example: ["item-1", "item-2"]

    Order:
      type: object
      required: [id, status, customerId, items, createdAt, updatedAt]
      properties:
        id:
          type: string
          description: Unique order identifier
          example: "order-123"
        status:
          type: string
          enum: [pending, paid, shipped, delivered]
          description: Current order status
          example: "pending"
        customerId:
          type: string
          description: Customer identifier
          example: "customer-123"
        items:
          type: array
          items:
            type: string
          description: List of order items
          example: ["item-1", "item-2"]
        createdAt:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2025-08-26T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Order last update timestamp
          example: "2025-08-26T10:30:00Z"

    OrderUpdate:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, paid, shipped, delivered]
          description: New order status
          example: "paid"

    ProblemDetails:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          description: Error type identifier
          example: "validation_error"
        title:
          type: string
          description: Human-readable error summary
          example: "Validation Error"
        status:
          type: integer
          description: HTTP status code
          example: 400
        detail:
          type: string
          description: Detailed error message
          example: "customerId should not be empty, items must contain at least 1 elements"
        instance:
          type: string
          description: Request path where error occurred
          example: "/orders"
